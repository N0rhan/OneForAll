from Crypto.Cipher import AES
from Crypto import Random
import base64
import random

class PasswordManager:
    def __init__(self):
        self.KEY = Random.new().read(16)

    def EncryptPassword(self, message):
        block_size = 16
        padding = "*"
        p = lambda s: s + (block_size - len(s) % block_size) * padding
        IV = Random.new().read(16)
        E = AES.new(self.KEY, AES.MODE_CBC, IV)
        Encrypted_message = base64.b64encode(IV + E.encrypt(p(message).encode('utf-8')))
        return Encrypted_message
    
    def DecryptPassword(self, Encrypted_message):
        Encrypted_message_ = base64.b64decode(Encrypted_message)[16:]
        IV_ = base64.b64decode(Encrypted_message)[:16]
        D = AES.new(self.KEY, AES.MODE_CBC, IV_)
        plain_text = D.decrypt(Encrypted_message_)
        plain_text = plain_text.decode('utf-8')
        return plain_text.rstrip('*')
    
    def GeneratePassword(self):
        alpa = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMONPQRSTUVWXYZ'
        numbers = '0123456789'
        symbols = "/\':?@ #$&()*+-{}]"
        length = 20
        valid_chars = alpa + numbers + symbols
        password_list = [random.choice(valid_chars) for _ in range(length)]
        passwd = ''.join(password_list)
        return passwd

